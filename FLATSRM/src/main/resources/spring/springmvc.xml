<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util-4.0.xsd 
       http://www.springframework.org/schema/mvc 
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.directwebremoting.org/schema/spring-dwr   
       http://www.directwebremoting.org/schema/spring-dwr-3.0.xsd">
      <!-- 静态资源访问的问题 -->
    <mvc:resources  location="/resources/" mapping="/resources/**" ></mvc:resources>
    
      <!-- 返回乱码处理 -->
    <mvc:annotation-driven>
	    <mvc:message-converters register-defaults="true">
	        <bean class="com.flat.srm.common.core.UTF8StringHttpMessageConverter">
	        	<property name="supportedMediaTypes">
	        		<list>  
	                    <value>text/plain;charset=UTF-8</value>  
	                    <value>text/html;charset=UTF-8</value>  
	                    <value>application/json;charset=UTF-8</value>  
	                </list>  
	        	</property>
	        </bean> 
			<bean class="org.springframework.http.converter.BufferedImageHttpMessageConverter"/>
			<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/> 
	        <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	        	<property name="prefixJson" value="false" />
	        	<property name="objectMapper">
	        		 <bean class="com.fasterxml.jackson.databind.ObjectMapper">
	                       <!-- 处理responseBody 里面日期类型 --> 
	                       <property name="dateFormat">  
	                           <bean class="java.text.SimpleDateFormat">  
	                               <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />  
	                           </bean>  
	                       </property> 
	                       <!-- 为null字段时不显示 -->
	                       <property name="serializationInclusion">
	                           <value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>
	                       </property> 
	                   </bean>  
	        	</property>
	        	 <property name="supportedMediaTypes">  
	                <list>  
	                    <value>application/json;charset=UTF-8</value>  
	                    <value>application/x-www-form-urlencoded;charset=UTF-8</value>  
	                </list>  
	            </property>
	        </bean>
    	</mvc:message-converters> 
	</mvc:annotation-driven> 
    <!-- springmvc是多例-->
    <!-- 验证声明 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass"  value="org.hibernate.validator.HibernateValidator"/>
        <!--不设置则默认为classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="validatemessageSource"/>
    </bean>
    <!-- 读取验证的资源文件 ,为要要用资源文件：就是是方便统一管理-->
  	<bean id="validatemessageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:validatemessages"/>
		<property name="fileEncodings" value="utf-8"/>
         <property name="cacheSeconds" value="120"/>   
     </bean> 
    <!-- 扫包 -->
    <context:component-scan base-package="com.flat.srm" use-default-filters="false">
   		<context:include-filter type="annotation" 
   			expression="org.springframework.stereotype.Controller"/>
   	</context:component-scan>
    
 
    <!-- 拦截器配置 -->
   <!--  <mvc:interceptors>
    	<mvc:interceptor>
    		<mvc:mapping path="/admin/**"/>
    		<bean class="com.jgz.core.LoginIntercetor"/>
    		<bean class="com.jgz.core.Intercetor.LoginStatsIntercetor"></bean>
    	</mvc:interceptor>
    </mvc:interceptors>  --> 
    
    <!-- 全路径 -->
 	  <bean id="path" class="com.flat.srm.common.core.BasePathExpsoer" init-method="init">
 		<!-- <property name="rootPath" value="http://www.tanzhouedu.com/file"></property> -->
     </bean>
    
    <!-- 返回视图 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    	<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
    	<property name="prefix" value="/WEB-INF/pages/"></property>
    	<property name="suffix" value=".jsp"></property>
    </bean>	
    
    <!-- DWR配置 -->  
	<!-- <bean  class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />  
    要求dwr在spring容器中检查拥有@RemoteProxy 和 @RemoteMethod注解的类。注意它不会去检查Spring容器之外的类。  
	<dwr:annotation-config id="dwr" />  
	要求DWR将util.js和engine.js映射到dwrController  
	<dwr:url-mapping />  
	定义dwr  
	<dwr:controller id="dwrController" debug="true">  
	    <dwr:config-param name="allowScriptTagRemoting"  
	        value="true" />  
	    <dwr:config-param name="crossDomainSessionSecurity"  
	        value="false" />  
	</dwr:controller>   -->
	<!-- DWR配置 -->  
    
    <!--文件上传配置  -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 上传文件的大小 -->
		<property name="maxUploadSize" value="92800000"></property>
		<!-- 设置编码 -->
		<property name="defaultEncoding" value="UTF-8"></property>
		<!-- 设置上传文件的零时存放目录 -->
		<property name="uploadTempDir" value="/upfilte/temp"></property>
	</bean> 
    
   <!-- 开启Shiro注解的Spring配置方式的beans。在lifecycleBeanPostProcessor之后运行 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"> 
    </bean> 
    
    <bean
        class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>  
   <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />  
   <!-- 开启Shiro注解的Spring配置方式的beans。在lifecycleBeanPostProcessor之后运行 --> 
   <!--统一的异常处理  -->
   <bean class="com.flat.srm.common.ex.MyExceptionHandler"></bean> 
    
</beans>